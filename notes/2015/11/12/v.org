#+STARTUP: overview
#+STARTUP: content
#+STARTUP: showall
#+STARTUP: showeverything
#+STARTUP: indent
#+STARTUP: nohideblocks
#+OPTIONS: ^:{}
#+OPTIONS: LaTeX:t
#+OPTIONS: LaTeX:dvipng
#+OPTIONS: LaTeX:nil
#+OPTIONS: LaTeX:verbatim
        
#+OPTIONS: H:3
#+OPTIONS: toc:t
#+OPTIONS: num:t
#+LANGUAGE: zh-CN
        
#+KEYWORDS: Linux学习
#+TITLE: vim编辑器
#+AUTHOR: fangqian
#+EMAIL: linuxsailor@gmail.com
#+DATE: 2014/12/08

* 学Vim的原因(摘自<<鸟哥的Linux私房菜>>)
+ 所有的UNIX Like系统都会内置vi文本编辑器,其它文本编辑器则不一定会存 
+ 很多软件的编辑接口都会主动调用vi(重点)
+ vim具有程序编辑的能力,可以主动以字体颜色辨别语法的正确性
+ 程序简单,编辑速度相当快.(个人感觉和Emacs比较还是挺简单的,惭愧还没有学会Emacs,以至于还在用gedit编辑博客...)
* Vi的使用

** vi分为3种模式:
+ 一般模式 
+ 编辑模式 
+ 命令行模式

*** 光标移动(一般模式下):

        +  [Ctrl] + [f] 	屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)

        +  [Ctrl] + [b] 	屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)

        +  0 或功能键[Home] 	这是数字『 0 』：移动到这一行的最前面字符处 (常用)

        +  $ 或功能键[End] 	移动到这一行的最后面字符处(常用)

        +  H            	光标移动到这个屏幕的最上方那一行的第一个字符

        +  M             	光标移动到这个屏幕的中央那一行的第一个字符

        +  L 	                光标移动到这个屏幕的最下方那一行的第一个字符

        +  G 	                移动到这个档案的最后一行(常用)

        +  nG 	                n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)

        +  gg 	                移动到这个档案的第一行，相当于 1G 啊！ (常用)

        +  n<Enter> 	        n 为数字。光标向下移动 n 行(常用) 

*** 第一部分 : 搜寻与取代

      +   /word 	向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)

      +   ?word 	向光标之上寻找一个字符串名称为 word 的字符串。

      +   n 	        这个 n 是英文按键。代表『重复前一个搜寻的动作』。

      +   N 	        这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。
                        使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！

      +   :n1,n2s/word1/word2/g 	n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 

      +   :1,$s/word1/word2/g 	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)

      +   :1,$s/word1/word2/gc 	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认是否需要取代！(常用)**** 删除、复制与贴上

    +     x, X 	在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)

    +     nx 	n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。

    +     dd 	删除游标所在的那一整列(常用)

    +     ndd 	n 为数字。删除光标所在的向下 n 列，例如 20dd 则是删除 20 列 (常用)

    +     d1G 	删除光标所在到第一行的所有数据

    +     dG 	删除光标所在到最后一行的所有数据

    +     d$ 	删除游标所在处，到该行的最后一个字符

    +     d0 	那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符

    +     yy 	复制游标所在的那一行(常用)

    +     nyy 	n 为数字。复制光标所在的向下 n 列，例如 20yy 则是复制 20 列(常用)

    +     y1G 	复制游标所在列到第一列的所有数据

    +     yG 	复制游标所在列到最后一列的所有数据

    +     y0 	复制光标所在的那个字符到该行行首的所有数据

    +     y$ 	复制光标所在的那个字符到该行行尾的所有数据

    +     p, P 	p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 

    +     J 	将光标所在列与下一列的数据结合成同一列

    +     c 	重复删除多个数据，例如向下删除 10 行，[ 10cj ]

    +     u 	复原前一个动作。(常用)

    +     [Ctrl]+r 	重做上一个动作。(常用)
          这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！
 	  如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)
*** 第二部份：一般模式切换到编辑模式的可用的按钮说明

          进入插入或取代的编辑模式

     +    i, I 	进入插入模式(Insert mode)：

     +    a, A 	进入插入模式(Insert mode)：

     +    o, O 	进入插入模式(Insert mode)：

     +    r, R 	进入取代模式(Replace mode)：

                r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)

               上面这些按键中，在 vi 画面的左下角处会出现『--INSERT--』或『--REPLACE--』的字样。 

          [Esc] 	退出编辑模式，回到一般模式中(常用)

*** 第三部份：一般模式切换到指令列模式的可用的按钮说明

         指令列的储存、离开等指令

     +  :w 	将编辑的数据写入硬盘档案中(常用)

     +  :w! 	若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！

     +  :q 	离开 vi (常用)

     +  :q! 	若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。
                注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～

     +  :wq 	储存后离开，若为 :wq! 则为强制储存后离开 (常用)

     +  ZZ 	这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！

     +  :w [filename] 	将编辑的数据储存成另一个档案（类似另存新档）

     +  :r [filename] 	在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面

     +  :n1,n2 w [filename] 	将 n1 到 n2 的内容储存成 filename 这个档案。

     +  :! command 	暂时离开 vi 到指令列模式下执行 command 的显示结果！例如
                        『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！

*** vim 环境的变更

+ :set nu(number)  显示行号，设定之后，会在每一行的前缀显示该行的行号

+ :set nonu        取消行号
