#+STARTUP: overview
#+STARTUP: content
#+STARTUP: showall
#+STARTUP: showeverything
#+STARTUP: indent
#+STARTUP: nohideblocks
#+OPTIONS: ^:{}
#+OPTIONS: LaTeX:t
#+OPTIONS: LaTeX:dvipng
#+OPTIONS: LaTeX:nil
#+OPTIONS: LaTeX:verbatim
        
#+OPTIONS: H:3
#+OPTIONS: toc:t
#+OPTIONS: num:t
#+LANGUAGE: zh-CN
        
#+KEYWORDS: Linux
#+TITLE: 文本处理器awk命令
#+AUTHOR: FangQian
#+EMAIL: qiangu_fang@163.com
#+DATE: 2015/12/08

* awk入门
** awk的功能
  awk 是 Linux 以及UNIX 环境中现有的功能最强大的数据处理工具。简单的讲,awk 是一种
处理文本数据的编程语言。awk 的设计使得它非常适合于处理由行和列组成的文本数据。
而在Linux和UNIX中这种类型的数据是非常普遍的。

  除此之外，awk还是一种编程语言环境，它提供了正则表达式的匹配、流程控制、运算符、
表达式、变量，以及函数等一系列的程序设计语言所具备的特性。awk程序可以读取文本文件，
对数据进行排序，对其中的数值进行计算以及生成报表等。
** awk命令的基本语法
awk命令的基本语法如下:
#+BEGIN_EXAMPLE
awk pattern { actions }
#+END_EXAMPLE
上面的语法中，pattern表示匹配模式,actions表示要执行的操作。以上语法表示当某个文本
行符合pattern指定的匹配规则时，执行actions所执行的操作。pattern和actions都是可选的，
但是两者必须保证至少有一个。如果省略pattern，表示对所有的文本行执行actions所表示的操作；
如果省略actions，则表示将匹配成功的行输出到屏幕。
+ 注意：actions前面的左大括号需与pattern位于同一行中。

awk命令的匹配模式非常灵活，可以是以下的任意一种
+ 正则表达式： 需要使用反斜线将正则表达式包围起来。
+ 关系表达式： 例如x>34,判断变量x与34是否存在大于的关系。
+ 模式1，模式2：指定一个行的范围。该语法不能包括BEGIN和END模式。
+ BEGIN：让用户指定在第一行文本被处理之前所发生的操作，通常可在这里设置全局变量。
+ ENND : 让用户在最后一行文本被读取之后发生的操作。

awk命令的操作由一个或者多个命令，函数或者表达式组成，它们之间由换行符或者分号隔开，
并且位于大括号内。通常有一下4中操作
+ 变量或者数组赋值。
+ 输出命令，例如printf或者print。
+ 内置函数。
+ 流程控制语句，例如if、while或者for等。
注意：awk命令的语法隐含一个条件结构，即如果符合匹配规则，则执行后面的操作。
** awk的工作流程
在awk处理数据时，它会反复执行以下4个步骤：
(1)自动从指定的数据文件中读取行文本。

(2)自动更新awk的内置系统变量的值，例如列数变量NF、行数变量NR、行变量$0...

(3)依次执行程序中所有的匹配模式及其操作。

(4)当执行完程序中所有的匹配模式及其操作之后，如果数据文件中仍然有未读取的数据行，则返回到第一步，重复执行(1)~(4)的操作。
** 执行awk程序的几种方式
1. 通过命令行执行awk程序，就像执行其他Shell命令一样。

2. 执行awk脚本
#+BEGIN_EXAMPLE
awk -f program-file file ..
说明：
-f:从脚本文件中读取awk程序语句
program-file：awk脚本文件名称(后缀为awk)
file:要处理的数据文件
awk脚本中不能含有除awk语句之外的其它命令或者语句，例如Shell命令等。
#+END_EXAMPLE

3.可执行脚本文件
这种方式类似于Shell脚本，不过需要先在awk程序中指定命令解释器
#+BEGIN_EXAMPLE
#!/bin/awk -f
#+END_EXAMPLE
以上语句必须在脚本文件的第一行。然后通过以下命令执行awk程序：
#+BEGIN_EXAMPLE
awk-script file
#+END_EXAMPLE
其中awk-script为脚本文件名称（.sh），file为要处理的文本数据文件。
* awk的模式匹配
在awk中,匹配模式处于非常重要的地位，它决定匹配模式后面的操作会影响到哪些文本行。awk中的匹配模式主要包括关系表达式，
正则表达式，混合模式，BEGIN模式，以及END模式等。
** 关系表达式
awk提供了许多关系运算符。awk允许用户使用关系表达式作匹配模式，当某个文本行满足关系表达式时，将会执行相应的操作。
** 正则表达式
awk支持以正则表达式为匹配模式，与sed一样，用户需要将正则表达式放在两条斜线之间，基本语法如下：
#+BEGIN_EXAMPLE
/regular_expression/
#+END_EXAMPLE
** 混合模式
awk不仅支持单个的关系表达式或者正则表达式作为模式，还支持使用逻辑运算符&&、||或者！将多个表达式组合起来作为一个模式。
+ awk的混合模式可以将正则表达式和关系表达式混合在一起使用。
** 区间模式
区间模式意味着awk通过模式可以匹配一段连续的文本行。区间模式的语法如下：
#+BEGIN_EXAMPLE
pattern1, pattern2
#+END_EXAMPLE
其中，pattern1和pattern2都是前面所说的匹配模式，可以是关系表达式，也可以是正则表达式。
注意：在使用区间模式时，一定要注意前后的边界。如果有多个行符合匹配模式，则会选择第一次符合要求的行。
** BEGIN模式
BEGIN模式是一种特殊的内置模式，其成立的时机为awk程序刚开始执行，但是又尚未读取任何数据之前。因此，此模式所对应的操作仅仅被执行一次，
当awk读取数据之后，BEGIN模式便不再成立。所以，用户可以将与数据文件无关，而且在整个程序的生命周期中，只需要执行一次的代码放在BEGIN模式
对应的操作中。
通常情况下，用户可以将一些初始化的操作放在BEGIN模式的操作中，例如自定义分隔符，行分隔符，以及初始化变量等。
#+BEGIN_SRC awk
#!/bin/awk -f
#通过BEGIN模式初始化变量
BEGIN {
   FS="[\t:]"    #指定列分隔符为制表符
   RS="\n"       #指定分隔符为换行符
   count=30      #定义了一个变量
}
#+END_SRC
对于只包含一个BEGIN模式的awk程序，awk不会打开任何数据文件。
** END模式
END模式一般用来做一些善后工作，比如输出一些信息。
* 变量
变量是用来存储数据。变量由变量名和值组成，其中变量名是用来实现变量值的引用的途径，而变量值则是内存空间中存储的用户数据。
** 变量的定义和引用
#+BEGIN_SRC awk
#!/bin/awk -f

BEGIN {
  # 定义变量x
   x=3
  # 定义变量,将两个字符串连接后赋给变量
   message="hello" "world"
  # 输出变量
   print x
   print messge
# 结果为3 hello world    
}
#+END_SRC
** 系统内置变量
awk所要处理的文件是由许多记录(record)组成。所谓记录，是用来描述某个具体事物的各个方面的。而记录是由多个字段(field)组成，每个字段描述某个事物的一个具体方面。
+ $0  记录变量 
表示awk正在处理的记录，该变量将整个记录作为一个字符串来处理。
+ $n  字段变量
表示当前记录的第n个字段的值
+ NF  整数值
表示当前记录的字段数(number of field)
+ NR  整数值
代表awk已经读取的记录的数量
+ FILENAM 
表示正在处理的数据文件的名称
+ FS
字段分隔符(field seperator),默认值为空格或者制表符
+ RS
记录分隔符(record seperator),默认awk会将换行符\n作为记录分隔符。
+ 注意：awk会在读取数据行之前通过FS及RS确定记录和字段的分隔符，然后进行记录和字段的分隔。每读取一条记录之后，变量$0以及$1,$2等变量都会自动更新。绝大部分文件都是一行包括一条记录，但是如果某些文件中的一条记录
跨越多行，则不能使用默认的分隔符，此时可以自定义分隔符，比如空行。
* 运算符和表达式
* 函数
* 数组
* 流程控制
* awk程序的格式化输出
* awk的程序与Shell的交互